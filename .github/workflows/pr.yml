name: Pull Request

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run Black (format check)
      run: |
        black --check --diff omg/ tests/

    - name: Run isort (import sort check)
      run: |
        isort --check-only --diff omg/ tests/

    - name: Run flake8 (linting)
      run: |
        flake8 omg/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run mypy (type checking)
      run: |
        mypy omg/ --ignore-missing-imports

  test-pr:
    name: Test PR on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11']  # Test minimum and latest supported versions

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Build package (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x build.sh
        ./build.sh

    - name: Build package (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        ./build.sh

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=omg --cov-report=term --cov-report=xml --cov-fail-under=80

    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "
        import omg
        matcher = omg.Matcher(['test', 'hello'])
        result = matcher.match('hello world test case')
        print('Wheel test passed:', len(result) > 0)
        "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run Bandit (security linter)
      run: |
        bandit -r omg/ -f json -o bandit-report.json || true
        bandit -r omg/

    - name: Run Safety (dependency vulnerability check)
      run: |
        pip install -r requirements.txt
        safety check

    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json
